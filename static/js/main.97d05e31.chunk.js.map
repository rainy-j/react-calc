{"version":3,"sources":["App.js","index.js"],"names":["App","useState","calc","setCalc","result","setResult","ops","updateCalc","value","includes","slice","eval","toString","createDigits","digits","i","push","onClick","generateOutput","out","evaluate","deleteLast","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2vBAGMA,IAAM,SAANA,MACJ,cAAwBC,oDAAS,IAAjC,8MAAOC,KAAP,cAAaC,QAAb,cACA,WAA4BF,oDAAS,IAArC,+MAAOG,OAAP,cAAeC,UAAf,cAEMC,IAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAE3BC,WAAa,SAAbA,WAAcC,OAEfF,IAAIG,SAASD,QAAmB,KAATN,MACvBI,IAAIG,SAASD,QAAUF,IAAIG,SAASP,KAAKQ,OAAO,MAInDP,QAAQD,KAAOM,OACVF,IAAIG,SAASD,QAChBH,UAAUM,KAAKT,KAAOM,OAAOI,cAI3BC,aAAe,WAGnB,IAFA,IAAMC,EAAS,GADU,WAGhBC,GACPD,EAAOE,KACL,qEAAQC,QAAS,kBAAMV,WAAWQ,EAAEH,aAApC,SACGG,GADmDA,KAFjDA,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAOT,OAAOD,GAGHI,eAAiB,WACrB,IAAMC,EAAMC,8CAASlB,MACrBC,QAAQgB,IAGJE,WAAa,WACjB,GAAY,IAARnB,KAAJ,CAIA,IAAMM,EAAQN,KAAKQ,MAAM,GAAI,GAE7BP,QAAQK,KAGV,OACE,kEAAKc,UAAU,MAAf,SACE,mEAAKA,UAAU,aAAf,UACE,mEAAKA,UAAU,UAAf,UACGlB,OAAS,kFAAQA,OAAR,OAA0B,GADtC,IAC2CF,MAAQ,OAGnD,mEAAKoB,UAAU,YAAf,UACE,qEAAQL,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eAEA,qEAAQU,QAASI,WAAjB,oBAEF,mEAAKC,UAAU,SAAf,UACGT,eACD,qEAAQI,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eAEA,qEAAQU,QAASC,eAAjB,wBAOKlB,2B,gCC7Ef,mEAMAuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.97d05e31.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { evaluate } from \"mathjs\";\n\nconst App = () => {\n  const [calc, setCalc] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const ops = [\"/\", \"*\", \"+\", \"-\", \".\"];\n\n  const updateCalc = (value) => {\n    if (\n      (ops.includes(value) && calc === \"\") ||\n      (ops.includes(value) && ops.includes(calc.slice(-1)))\n    ) {\n      return;\n    }\n    setCalc(calc + value);\n    if (!ops.includes(value)) {\n      setResult(eval(calc + value).toString());\n    }\n  };\n\n  const createDigits = () => {\n    const digits = [];\n\n    for (let i = 1; i < 10; i++) {\n      digits.push(\n        <button onClick={() => updateCalc(i.toString())} key={i}>\n          {i}\n        </button>\n      );\n    }\n    return digits;\n  };\n\n  const generateOutput = () => {\n    const out = evaluate(calc);\n    setCalc(out);\n  };\n\n  const deleteLast = () => {\n    if (calc == \"\") {\n      return;\n    }\n\n    const value = calc.slice(0, -1);\n\n    setCalc(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"calculator\">\n        <div className=\"display\">\n          {result ? <span>({result})</span> : \"\"} {calc || \"0\"}\n        </div>\n\n        <div className=\"operators\">\n          <button onClick={() => updateCalc(\"/\")}>/</button>\n          <button onClick={() => updateCalc(\"*\")}>*</button>\n          <button onClick={() => updateCalc(\"+\")}>+</button>\n          <button onClick={() => updateCalc(\"-\")}>-</button>\n\n          <button onClick={deleteLast}>DEL</button>\n        </div>\n        <div className=\"digits\">\n          {createDigits()}\n          <button onClick={() => updateCalc(\"0\")}>0</button>\n          <button onClick={() => updateCalc(\".\")}>.</button>\n\n          <button onClick={generateOutput}>=</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}